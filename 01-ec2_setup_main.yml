---

- name: "Ec2 creation"
  hosts: localhost
  vars:
    keypair_name: "ansible-remote-key"
    access_key: "AKIAVOYUBUYWFSWREDN5"
    secret_key: "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"
    region: "us-east-2"
    sg1: "ansible-remote"
    sg2: "ansible-webserver"
    ami_id: ami-002068ed284fb165b
  tasks:
    - name: "AWS - Creating Ssh KeyPair"
      ec2_key:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ keypair_name }}"
        state: present
      register: keypair_content
    
    - name: "debug"
      debug:
        var: keypair_content.key.private_key
    
    - name: "AWS - Saving Private Key Content"
      when: keypair_content.changed == true
      copy:
        content: "{{ keypair_content.key.private_key }}"
        dest: "{{ keypair_name }}.pem"
        mode: 0400

    - name: "AWS - Creating Security Group {{ sg1 }}"
      ec2_group:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ sg1 }}"
        description: "Allows Only 22 Conntenction"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip:
              - 0.0.0.0/0
            cidr_ipv6:
              - ::/0
        tags:
            Name: "{{ sg1 }}"
      register: sg1_status
                  
                  
    - name: "AWS - Creating Security Group {{ sg2 }}"
      ec2_group:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ sg2 }}"
        description: "Allows Only 80,443 Conntenction"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip:
              - 0.0.0.0/0
            cidr_ipv6:
              - ::/0
                  
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip:
              - 0.0.0.0/0
            cidr_ipv6:
              - ::/0
        tags:
          Name: "{{ sg2 }}"
      register: sg2_status

    - debug:
        msg: "{{ sg1_status.group_id }} - {{ sg2_status.group_id }}"


    - name: "AWS - Creating Ec2 Instance"
      ec2:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        key_name: "{{ keypair_name }}"
        instance_type: "t2.micro"
        image: "{{ ami_id }}"
        wait: yes
        group_id:
          - "{{ sg1_status.group_id }}"
          - "{{ sg2_status.group_id }}"
        instance_tags:
            Name: "webserver"
        count_tag:
          Name: "webserver"
        wait_timeout: 500
        exact_count: 1
      register: ec2_status

    - name: "Instance Ip Address Instance"
      debug:
        msg: "instances address {{ item.public_ip }}"
      with_items: 
        - "{{ ec2_status.tagged_instances }}"


    - name: "Creating Dynamic Inventory"
      add_host:
        name: "{{ item.public_ip }}"
        groups: "webserver"
        ansible_host: "{{ item.public_ip }}"
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: "{{ keypair_name }}.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items:
        - "{{ ec2_status.tagged_instances }}"



############### Play book #######################

- name: "Creating Virtualhost"
  become: true
  hosts: webserver
  vars:
    httpd_port: 80
    httpd_user: "apache"
    httpd_group: "apache"
    domain_name: "www.abc.com"
  tasks:

    - name: "Installing Apache"
      yum:
        name:
          - httpd
        state: present
          
    - name: "Creating Virtualhost"
      template:
        src: "virtualhost.conf.j2"
        dest: "/etc/httpd/conf.d/{{ domain_name }}.conf"
        owner: "root"
        group: "root"
      register: vhost_status
      
    - name: "Creating Documentroot"
      file:
        path: "/var/www/html/{{ domain_name }}"
        state: directory
        owner: "{{  httpd_user }}"
        group: "{{ httpd_group }}"
          
    - name: "downoad websiute files"
      unarchive:
        src: https://www.tooplate.com/zip-templates/2121_wave_cafe.zip
        dest: /tmp/
        remote_src: true

    - name: "copy file to doc root"
      when: ansible_os_family == "RedHat"
      copy:
        src: /tmp/2121_wave_cafe/
        dest: /var/www/html/{{ domain_name }}/
        owner: "{{ httpd_user }}"
        group: "{{ httpd_group }}"
        remote_src: true
      register: copy_status
    - name: "Restarting/enabling apache"
      when: copy_status.changed == true or vhost_status.changed == true
      service:
        name: httpd
        state: restarted
        enabled: true